import random
import faker
from datetime import datetime, timedelta

# Setup Faker for generating mock data
fake = faker.Faker()

# Data stores for unique values
users = {}
user_devices = {}
user_friends = {}
user_game_types = {}
game_types = {}
add_fund_record = {}
buy_item_cancel = {}
buy_item = {}
cart = {}
games = {}
game_items = {}
game_game_type = {}
game_reviews = {}
publishers = {}
developers = {}
game_developers = {}
user_games = {}
user_game_statistics = {}
user_inventory = {}
achievements = {}
user_achievements = {}

def generate_users(num=10):
    for _ in range(num):
        user_id = fake.unique.random_number(digits=10)
        users[user_id] = {
            "user_id": user_id,
            "password_hash": fake.sha256(),
            "user_name": fake.user_name(),
            "user_description": fake.sentence(),
            "profile_pic": fake.image_url(),
            "profile_background": fake.image_url(),
            "birth_day": fake.date_of_birth(minimum_age=18, maximum_age=80),
            "email": fake.email(),
            "country": fake.country(),
            "language": fake.language_name(),
            "fund": random.randint(100, 1000),
            "filtering": random.choice([True, False]),
            "notification": random.choice([True, False]),
            "cookies": random.choice([True, False]),
        }
        print(f"INSERT INTO [USER] (user_id, password_hash, user_name, user_description, profile_pic, profile_background, birth_day, email, country, language, fund, filtering, notification, cookies) "
              f"VALUES ('{user_id}', '{users[user_id]['password_hash']}', '{users[user_id]['user_name']}', '{users[user_id]['user_description']}', '{users[user_id]['profile_pic']}', '{users[user_id]['profile_background']}', '{users[user_id]['birth_day']}', '{users[user_id]['email']}', '{users[user_id]['country']}', '{users[user_id]['language']}', {users[user_id]['fund']}, {str(users[user_id]['filtering']).upper()}, {str(users[user_id]['notification']).upper()}, {str(users[user_id]['cookies']).upper()});")

# Define a function to generate user devices
def generate_user_devices(num=10):
    for _ in range(num):
        user_id = random.choice(list(users.keys()))
        device_id = fake.unique.random_number(digits=10)
        device_name = fake.word()
        device_type = fake.word()
        print(f"INSERT INTO USER_DEVICES (user_id, device_id, device_name, type) "
              f"VALUES ('{user_id}', '{device_id}', '{device_name}', '{device_type}');")

# Define a function to generate user friends
def generate_user_friends(num=10):
    for _ in range(num):
        user_id = random.choice(list(users.keys()))
        friend_id = random.choice(list(users.keys()))
        while friend_id == user_id:
            friend_id = random.choice(list(users.keys()))
        print(f"INSERT INTO USER_FRIENDS (user_id, friend_id) "
              f"VALUES ('{user_id}', '{friend_id}');")

# Define a function to generate user game types
def generate_user_game_types(num=5):
    for _ in range(num):
        user_id = random.choice(list(users.keys()))
        game_type_id = fake.unique.random_number(digits=10)
        user_game_types[(user_id, game_type_id)] = {
            "user_id": user_id,
            "game_type_id": game_type_id,
        }
        print(f"INSERT INTO USER_GAME_TYPES (user_id, game_type_id) "
              f"VALUES ('{user_id}', '{game_type_id}');")

# Define a function to generate game types
def generate_game_types(num=5):
    for _ in range(num):
        game_type_id = fake.unique.random_number(digits=10)
        game_types[game_type_id] = {
            "game_type_id": game_type_id,
            "game_type_name": fake.word(),
        }
        print(f"INSERT INTO GAME_TYPES (game_type_id, game_type_name) "
              f"VALUES ('{game_type_id}', '{game_types[game_type_id]['game_type_name']}');")

# Define a function to generate add fund records
def generate_add_fund_record(num=10):
    for _ in range(num):
        add_fund_record_id = fake.unique.random_number(digits=10)
        user_id = random.choice(list(users.keys()))
        fund_change = random.randint(10, 1000)
        timestamp = fake.date_time_this_year()
        print(f"INSERT INTO ADD_FUND_RECORD (add_fund_record_id, user_id, fund_change, timestamp) "
              f"VALUES ('{add_fund_record_id}', '{user_id}', {fund_change}, '{timestamp}');")

# Define a function to generate buy item records
def generate_buy_item(num=10):
    if not games or not game_items:
        raise ValueError("Games or game items have not been generated yet.")
    for _ in range(num):
        buy_item_id = fake.unique.random_number(digits=10)
        user_id = random.choice(list(users.keys()))
        game_id = random.choice(list(games.keys()))
        item_id = random.choice(list(game_items.keys()))
        price = random.randint(10, 100)
        timestamp = fake.date_time_this_year()
        is_cancelled = random.choice([True, False])
        buy_item[buy_item_id] = {
            "buy_item_id": buy_item_id,
            "user_id": user_id,
            "game_id": game_id,
            "item_id": item_id,
            "price": price,
            "timestamp": timestamp,
            "is_cancelled": is_cancelled
        }
        print(f"INSERT INTO BUY_ITEM (buy_item_id, user_id, game_id, item_id, price, timestamp, isCancelled) "
              f"VALUES ('{buy_item_id}', '{user_id}', '{game_id}', '{item_id}', {price}, '{timestamp}', {str(is_cancelled).upper()});")

# Define a function to generate buy item cancel records
def generate_buy_item_cancel(num=10):
    if not buy_item:
        raise ValueError("Buy item records have not been generated yet.")
    for _ in range(num):
        buy_item_id = random.choice(list(buy_item.keys()))
        timestamp = fake.date_time_this_year()
        buy_item_cancel[buy_item_id] = {
            "buy_item_id": buy_item_id,
            "timestamp": timestamp
        }
        print(f"INSERT INTO BUY_ITEM_CANCEL (buy_item_id, timestamp) "
              f"VALUES ('{buy_item_id}', '{timestamp}');")

# Define a function to generate cart items
def generate_cart(num=10):
    if not games or not game_items:
        raise ValueError("Games or game items have not been generated yet.")
    for _ in range(num):
        user_id = random.choice(list(users.keys()))
        game_id = random.choice(list(games.keys()))
        item_id = random.choice(list(game_items.keys()))
        cart[(user_id, item_id)] = {
            "user_id": user_id,
            "game_id": game_id,
            "item_id": item_id
        }
        print(f"INSERT INTO CART (user_id, game_id, item_id) "
              f"VALUES ('{user_id}', '{game_id}', '{item_id}');")

# Define a function to generate games
def generate_games(num=10):
    for _ in range(num):
        game_id = fake.unique.random_number(digits=10)
        games[game_id] = {
            "game_id": game_id,
            "game_name": fake.word(),
            "game_description": fake.sentence(),
            "system_requirements": fake.sentence(),
        }
        print(f"INSERT INTO GAME (game_id, game_name, game_description, system_requirements) "
              f"VALUES ('{game_id}', '{games[game_id]['game_name']}', '{games[game_id]['game_description']}', "
              f"'{games[game_id]['system_requirements']}');")

# Define a function to generate game items
def generate_game_items(num=10):
    if not games:
        raise ValueError("Games have not been generated yet.")
    for _ in range(num):
        game_item = fake.unique.random_number(digits=10)
        game_id = random.choice(list(games.keys()))
        game_items[game_item] = {
            "item_id": game_item,
            "game_id": game_id,
            "original_price": random.randint(10, 100),
            "current_price": random.randint(10, 100),
            "special_offer": round(random.uniform(0, 1), 2),
            "release_date": fake.date_this_decade(),
        }
        print(f"INSERT INTO GAME_ITEM (item_id, game_id, original_price, current_price, special_offer, release_date) "
              f"VALUES ('{game_item}', '{game_id}', {game_items[game_item]['original_price']}, "
              f"{game_items[game_item]['current_price']}, {game_items[game_item]['special_offer']}, "
              f"'{game_items[game_item]['release_date']}');")

# Define a function to generate game game types
def generate_game_game_type(num=5):
    if not games or not game_types:
        raise ValueError("Games or game types have not been generated yet.")
    for _ in range(num):
        game_id = random.choice(list(games.keys()))
        game_type_id = random.choice(list(game_types.keys()))
        game_game_type[(game_id, game_type_id)] = {
            "game_id": game_id,
            "game_type_id": game_type_id
        }
        print(f"INSERT INTO GAME_GAME_TYPE (game_id, game_type_id) "
              f"VALUES ('{game_id}', '{game_type_id}');")

# Define a function to generate game reviews
def generate_game_reviews(num=10):
    if not games:
        raise ValueError("Games have not been generated yet.")
    for _ in range(num):
        review_id = fake.unique.random_number(digits=10)
        game_id = random.choice(list(games.keys()))
        user_id = random.choice(list(users.keys()))
        review_timestamp = fake.date_time_this_year()
        rating = random.randint(1, 5)
        text = fake.sentence()
        game_reviews[review_id] = {
            "review_id": review_id,
            "game_id": game_id,
            "user_id": user_id,
            "review_timestamp": review_timestamp,
            "rating": rating,
            "text": text
        }
        print(f"INSERT INTO GAME_REVIEWS (review_id, game_id, user_id, review_timestamp, rating, text) "
              f"VALUES ('{review_id}', '{game_id}', '{user_id}', '{review_timestamp}', {rating}, '{text}');")

# Define a function to generate publishers
def generate_publishers(num=10):
    for _ in range(num):
        publisher_id = fake.unique.random_number(digits=10)
        publisher_name = fake.company()
        description = fake.sentence()
        publishers[publisher_id] = {
            "publisher_id": publisher_id,
            "publisher_name": publisher_name,
            "description": description,
        }
        print(f"INSERT INTO PUBLISHERS (publisher_id, publisher_name, description) "
              f"VALUES ('{publisher_id}', '{publisher_name}', '{description}');")

# Define a function to generate developers
def generate_developers(num=10):
    if not publishers:
        raise ValueError("Publishers have not been generated yet.")
    for _ in range(num):
        developer_id = fake.unique.random_number(digits=10)
        developer_name = fake.company()
        description = fake.sentence()
        publisher_id = random.choice(list(publishers.keys()))
        developers[developer_id] = {
            "developer_id": developer_id,
            "developer_name": developer_name,
            "description": description,
            "publisher_id": publisher_id,
        }
        print(f"INSERT INTO DEVELOPERS (developer_id, developer_name, description, publisher_id) "
              f"VALUES ('{developer_id}', '{developer_name}', '{description}', '{publisher_id}');")

# Define a function to generate game developers
def generate_game_developers(num=10):
    if not developers or not games:
        raise ValueError("Developers or games have not been generated yet.")
    for _ in range(num):
        developer_id = random.choice(list(developers.keys()))
        game_id = random.choice(list(games.keys()))
        game_developers[(developer_id, game_id)] = {
            "developer_id": developer_id,
            "game_id": game_id
        }
        print(f"INSERT INTO GAME_DEVELOPERS (developer_id, game_id) VALUES ('{developer_id}', '{game_id}');")

# Define a function to generate user games
def generate_user_games(num=10):
    if not games:
        raise ValueError("Games have not been generated yet.")
    for _ in range(num):
        user_id = random.choice(list(users.keys()))
        game_id = random.choice(list(games.keys()))
        installed_date = fake.date_this_decade()
        uninstalled_date = fake.date_this_decade() if random.choice([True, False]) else None
        user_games[(user_id, game_id)] = {
            "user_id": user_id,
            "game_id": game_id,
            "installed_date": installed_date,
            "uninstalled_date": uninstalled_date
        }
        print(f"INSERT INTO USER_GAMES (user_id, game_id, installed_date, uninstalled_date) "
              f"VALUES ('{user_id}', '{game_id}', '{installed_date}', '{uninstalled_date}' if uninstalled_date else 'NULL');")

# Define a function to generate user game statistics
def generate_user_game_statistics(num=10):
    if not games:
        raise ValueError("Games have not been generated yet.")
    for _ in range(num):
        user_id = random.choice(list(users.keys()))
        game_id = random.choice(list(games.keys()))
        played_time = timedelta(minutes=random.randint(1, 1000))
        achievement_num = random.randint(0, 50)
        user_game_statistics[(user_id, game_id)] = {
            "user_id": user_id,
            "game_id": game_id,
            "played_time": played_time,
            "achievement_num": achievement_num
        }
        print(f"INSERT INTO USER_GAME_STATISTICS (user_id, game_id, played_time, achievement_num) "
              f"VALUES ('{user_id}', '{game_id}', '{played_time}', {achievement_num});")

# Define a function to generate user inventory
def generate_user_inventory(num=10):
    if not games or not game_items:
        raise ValueError("Games or game items have not been generated yet.")
    for _ in range(num):
        user_id = random.choice(list(users.keys()))
        game_item = random.choice(list(game_items.keys()))
        game_id = game_items[game_item]["game_id"]
        acquired_date = fake.date_this_century()
        not_owned_date = fake.date_this_century() if random.choice([True, False]) else None
        user_inventory[(user_id, game_item)] = {
            "user_id": user_id,
            "game_id": game_id,
            "item_id": game_item,
            "acquired_date": acquired_date,
            "not_owned_date": not_owned_date
        }
        print(f"INSERT INTO USER_INVENTORY (user_id, game_id, item_id, acquired_date, not_owned_date) "
              f"VALUES ('{user_id}', '{game_id}', '{game_item}', '{acquired_date}', '{not_owned_date}' if not_owned_date else 'NULL');")

# Define a function to generate achievements
def generate_achievements(num=10):
    if not games:
        raise ValueError("Games have not been generated yet.")
    for _ in range(num):
        achievement_id = fake.unique.random_number(digits=10)
        game_id = random.choice(list(games.keys()))
        achievement_name = fake.word()
        achievement_description = fake.sentence()
        achievements[achievement_id] = {
            "achievement_id": achievement_id,
            "game_id": game_id,
            "achievement_name": achievement_name,
            "achievement_description": achievement_description,
        }
        print(f"INSERT INTO ACHIEVEMENTS (game_id, achievement_id, achievement_name, achievement_description) "
              f"VALUES ('{game_id}', '{achievement_id}', '{achievement_name}', '{achievement_description}');")

# Define a function to generate user achievements
def generate_user_achievements(num=10):
    if not achievements:
        raise ValueError("Achievements have not been generated yet.")
    for _ in range(num):
        user_id = random.choice(list(users.keys()))
        achievement_id = random.choice(list(achievements.keys()))
        achieved_date = fake.date_this_century()
        user_achievements[(user_id, achievement_id)] = {
            "user_id": user_id,
            "achievement_id": achievement_id,
            "achieved_date": achieved_date
        }
        print(f"INSERT INTO USER_ACHIEVEMENTS (user, achievement_id, achieved_date) "
              f"VALUES ('{user_id}', '{achievement_id}', '{achieved_date}');")

# Generate the data for all tables
generate_users(5)
generate_user_devices(5)
generate_user_friends(5)
generate_user_game_types(3)
generate_game_types(3)
generate_add_fund_record(5)
generate_games(3)
generate_game_items(5)
generate_buy_item(5)
generate_buy_item_cancel(5)
generate_cart(5)
generate_game_game_type(3)
generate_game_reviews(5)
generate_publishers(5)
generate_developers(5)
generate_game_developers(5)
generate_user_games(5)
generate_user_game_statistics(5)
generate_user_inventory(5)
generate_achievements(5)
generate_user_achievements(5)
